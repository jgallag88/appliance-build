#!/bin/bash
#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

. "${BASH_SOURCE%/*}/common.sh"

IMAGE_PATH=$(get_image_path)
[[ -n "$IMAGE_PATH" ]] || die "failed to determine image path"

[[ "$EUID" -ne 0 ]] && die "must be run as root"

function report_progress() {
	echo "Progress increment: $(date +%T:%N%z), $1, $2"
}

function cleanup() {
	#
	# Capture the exit code here, and use that to determine if
	# upgrade verification was successful or not.
	#
	local rc="$?"

	#
	# If the CONTAINER variable is empty, this means container
	# creation failed. In that case, the container creation process
	# will have already cleaned up after itself, and there's no
	# further cleanup for us to do here.
	#
	[[ -z "$CONTAINER" ]] && return

	if [[ "$rc" == "0" || "$DLPX_DEBUG" != "true" ]]; then
		report_progress 80 "Performing upgrade verification cleanup"

		#
		# On success, or on failure when DLPX_DEBUG is not true,
		# we clean up the container previously created. When
		# DLPX_DEBUG is true, we leave the container around on
		# failure to aid debugging efforts.
		#
		"$IMAGE_PATH/upgrade-container" stop "$CONTAINER" ||
			warn "failed to stop container '$CONTAINER'"
		"$IMAGE_PATH/upgrade-container" destroy "$CONTAINER" ||
			warn "failed to stop container '$CONTAINER'"
	else
		report_progress 80 "Skipping upgrade verification cleanup"
	fi

	[[ $rc -eq 0 ]] &&
		# On success, we must report 100 progress. Java stack treats
		# script execution a failure if non-zero status is reported or
		# 100 progress is not reported.
		report_progress 100 "Upgrade verification was successful"
	return "$rc"
}

trap cleanup EXIT

report_progress 0 "Creating upgrade verification container"
CONTAINER=$("$IMAGE_PATH/upgrade-container" create in-place)
[[ -n "$CONTAINER" ]] || die "failed to create container"

report_progress 20 "Starting upgrade verification container"
"$IMAGE_PATH/upgrade-container" start "$CONTAINER" ||
	die "failed to start '$CONTAINER'"

report_progress 40 "Performing package upgrade verification"
"$IMAGE_PATH/upgrade-container" run "$CONTAINER" "$IMAGE_PATH/execute" ||
	die "'$IMAGE_PATH/execute' failed in '$CONTAINER'"

report_progress 60 "Performing application upgrade verification"
"$IMAGE_PATH/upgrade-container" run "$CONTAINER" \
	"$IMAGE_PATH/verify-impl" "$@" ||
	die "'$IMAGE_PATH/verify-impl' '$*' failed in '$CONTAINER'"

#
# The cleanup logic will be run on EXIT, so rather than reporting 100
# percent here, we use the cleanup logic to do the final reporting.
#
